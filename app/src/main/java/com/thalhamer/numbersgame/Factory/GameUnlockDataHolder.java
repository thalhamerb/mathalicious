package com.thalhamer.numbersgame.Factory;import android.annotation.TargetApi;import android.os.Build;import com.google.common.collect.Lists;import com.thalhamer.numbersgame.R;import com.thalhamer.numbersgame.domain.GameUnlock;import com.thalhamer.numbersgame.domain.Power;import com.thalhamer.numbersgame.enums.PowerEnum;import com.thalhamer.numbersgame.services.JsonService;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.io.IOException;import java.util.Iterator;import java.util.List;/** * Game unlock data holder * <p/> * Created by Brian on 6/13/2015. */public class GameUnlockDataHolder {    private static GameUnlockDataHolder instance;    private List<GameUnlock> gameUnlocksList;    private JsonService jsonService = new JsonService();    public static GameUnlockDataHolder getInstance() {        if (instance == null) {            instance = new GameUnlockDataHolder();        }        return instance;    }    public List<GameUnlock> getGameUnlockInfo() {        if (gameUnlocksList == null) {            gameUnlocksList = createGameUnlocksObject();        }        return gameUnlocksList;    }    private List<GameUnlock> createGameUnlocksObject() {        try {            String gameUnlocksFileName = App.getContext().getString(R.string.game_unlocks_file_name);            File file = new File(App.getContext().getFilesDir(), gameUnlocksFileName);            //file.delete();  //use this line when accidentally get rid of all game unlocks files            checkUnlockFileExists(file, gameUnlocksFileName);            JSONArray jsonArray = new JSONArray(jsonService.getStringFromInternalFile(file));            List<GameUnlock> gameUnlocksList = Lists.newArrayList();            //create list            for (int i = 0; i < jsonArray.length(); i++) {                JSONObject obj = jsonArray.getJSONObject(i);                GameUnlock gameUnlock = new GameUnlock();                gameUnlock.setSectionName(obj.getString(App.getContext().getString(R.string.section)));                gameUnlock.setNumOfStars(obj.getInt("stars"));                JSONObject powersObject = obj.getJSONObject("powers");                Iterator<String> powers = powersObject.keys();                List<Power> powerList = Lists.newArrayList();                while (powers.hasNext()) {                    String powerAsString = powers.next();                    Integer quantityToAdd = powersObject.getInt(powerAsString);                    Power power = new Power(PowerEnum.valueOf(powerAsString), quantityToAdd);                    powerList.add(power);                }                gameUnlock.setPowers(powerList);                gameUnlocksList.add(gameUnlock);            }            return gameUnlocksList;        } catch (IOException | JSONException e) {            e.printStackTrace();        }        return null;    }    @TargetApi(Build.VERSION_CODES.KITKAT)    public void removeGameUnlocksObject(GameUnlock gameUnlock) {        try {            for (GameUnlock currGameUnlock : gameUnlocksList) {                if (gameUnlock.getNumOfStars().equals(currGameUnlock.getNumOfStars())) {                    gameUnlocksList.remove(currGameUnlock);                    break;                }            }            String gameUnlocksFileName = App.getContext().getString(R.string.game_unlocks_file_name);            File file = new File(App.getContext().getFilesDir(), gameUnlocksFileName);            JSONArray jsonArray = new JSONArray(jsonService.getStringFromInternalFile(file));            for (int i = 0; i < jsonArray.length(); i++) {                JSONObject obj = jsonArray.getJSONObject(i);                if (obj.getString(App.getContext().getString(R.string.section)).equals(gameUnlock.getSectionName())) {                    jsonArray.remove(i);                }            }            jsonService.writeJsonToFile(jsonArray.toString(), gameUnlocksFileName);        } catch (Exception e) {            e.printStackTrace();        }    }    private void checkUnlockFileExists(File file, String gameUnlocks) throws IOException {        if (!file.exists()) {            String gameUnlocksJson = jsonService.getJsonDataFromResource(gameUnlocks, "raw");            jsonService.writeJsonToFile(gameUnlocksJson, gameUnlocks);        }    }}