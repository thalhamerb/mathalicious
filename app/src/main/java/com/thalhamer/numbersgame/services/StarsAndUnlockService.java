package com.thalhamer.numbersgame.services;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.R;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.domain.LevelData;import com.thalhamer.numbersgame.domain.LevelInfo;import com.thalhamer.numbersgame.domain.StarsInfo;import org.json.JSONException;import org.json.JSONObject;import javax.inject.Inject;import javax.inject.Singleton;/** * Stars and unlock service * <p/> * Created by Brian on 5/12/2015. */@Singletonpublic class StarsAndUnlockService {    public static final int MAX_EPIC = 3;    public static final int MAX_SECTION = 3;    public static final int MAX_LEVEL = 9;    @Inject    GameDataHolder gameDataHolder;    @Inject    SavedDataService savedDataService;    @Inject    GridTileDataService gridTileDataService;    @Inject    SectionUnlockService sectionUnlockService;    public Integer evaluateAndSaveStarsEarned() {        String levelName = savedDataService.constructLevelName(gameDataHolder.getLevelData());        StarsInfo starsInfo = gameDataHolder.getLevelInfo().getStats().getStarsInfo();        int currentNumOfStars = starsInfo.getCurrentNumOfStars();        int newNumOfStars = getNumOfStarsEarned(starsInfo, gameDataHolder.getLevelInfo().getStats().getScore());        int starsDiff = newNumOfStars - currentNumOfStars;        if (starsDiff > 0) {            savedDataService.saveKey(levelName, newNumOfStars);            int currTotalNumOfStars = savedDataService.getIntKeyValue(App.getContext().getString(R.string.total_stars_key), 0);            savedDataService.saveKey(App.getContext().getString(R.string.total_stars_key), currTotalNumOfStars + starsDiff);        }        return newNumOfStars;    }    public int getNumOfStarsEarned(StarsInfo starsInfo, long gameScore) {        LevelInfo levelInfo = gameDataHolder.getLevelInfo();        if (levelInfo.getGridTileData() != null && !gridTileDataService.finishedAllExtraTasks(levelInfo.getGridData(), levelInfo.getGridTileData())) {            return 0;        }        if (gameScore >= starsInfo.getMinForThreeStars()) {            return 3;        } else if (gameScore >= starsInfo.getMinForTwoStars()) {            return 2;        } else if (gameScore >= starsInfo.getMinForOneStar()) {            return 1;        } else {            return 0;        }    }    /**     * unlocks next level if locked     *     * @param levelData level data     * @return LevelData.  Returns null if completed last level in game.     */    public LevelData unlockNextLevelIfLocked(LevelData levelData) {        LevelData nextLevelData = getNextLevel(levelData);        if (nextLevelData != null && sectionUnlockService.isSectionUnlocked(nextLevelData)) {            String levelName = savedDataService.constructLevelName(nextLevelData);            if (!savedDataService.containsKey(levelName)) {                savedDataService.saveKey(levelName, 0);            }        }        return nextLevelData;    }    /**     * gets next level data     *     * @param levelData level data     * @return LevelData.  Returns null if completed last level.     */    public LevelData getNextLevel(LevelData levelData) {        int currentLevel = levelData.getLevel();        int currentSection = levelData.getSection();        int currentEpic = levelData.getEpic();        LevelData nextLevelData = new LevelData();        if (currentLevel == MAX_LEVEL) {            nextLevelData.setLevel(1);            currentSection++;        } else {            currentLevel++;            nextLevelData.setLevel(currentLevel);        }        if (currentSection > MAX_SECTION) {            nextLevelData.setSection(1);            currentEpic++;        } else {            nextLevelData.setSection(currentSection);        }        if (currentEpic > MAX_EPIC) {            return null;        } else {            nextLevelData.setEpic(currentEpic);        }        return nextLevelData;    }    public StarsInfo getStarsInfo(JSONObject object, String savedDataLevelRef) throws JSONException {        StarsInfo starsInfo = new StarsInfo();        JSONObject starsInfoJsonObject = object.getJSONObject("starsInfo");        if (savedDataService == null) {            savedDataService = new SavedDataService();        }        starsInfo.setCurrentNumOfStars(savedDataService.getIntKeyValue(savedDataLevelRef, 0));        starsInfo.setMinForOneStar(starsInfoJsonObject.getLong("minForOneStar"));        starsInfo.setMinForTwoStars(starsInfoJsonObject.getLong("minForTwoStars"));        starsInfo.setMinForThreeStars(starsInfoJsonObject.getLong("minForThreeStars"));        return starsInfo;    }}