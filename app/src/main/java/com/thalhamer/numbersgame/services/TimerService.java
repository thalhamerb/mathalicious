package com.thalhamer.numbersgame.services;import android.os.CountDownTimer;import android.os.Handler;import android.util.Log;import com.thalhamer.numbersgame.Exception.HandlerException;import com.thalhamer.numbersgame.domain.DropBlockData;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.domain.LevelInfo;import com.thalhamer.numbersgame.domain.Stats;import com.thalhamer.numbersgame.enums.GameState;import com.thalhamer.numbersgame.enums.GameType;import com.thalhamer.numbersgame.enums.ScoreType;import com.thalhamer.numbersgame.enums.sounds.SoundEnum;import com.thalhamer.numbersgame.viewhelper.GameStateHolder;import javax.inject.Inject;import javax.inject.Singleton;/** * Timer Service * <p/> * Created by Brian on 4/24/2015. */@Singletonpublic class TimerService {    @Inject    GameDataHolder gameDataHolder;    @Inject    GameEndService gameEndService;    @Inject    GridService gridService;    @Inject    GridMappingService gridMappingService;    @Inject    SoundService soundService;    private int numOfRetries = 0;    private CountDownTimer countDownTimer;    private int initialPeriod;    private Handler freqHandler;    private boolean gameCurrentlyRunning = false;    /**     * can be used for start or restart of timers and callbacks     */    public void startTimersAndHandlerCallbacks() {        if (!gameCurrentlyRunning) {            gameCurrentlyRunning = true;            LevelInfo levelInfo = gameDataHolder.getLevelInfo();            gameDataHolder.setBlockDropHandler(new Handler());            if (levelInfo.getGameType().equals(GameType.TIMED)) {                startCountDownTimer();            } else if (GameType.DROP.equals(levelInfo.getGameType())) {                DropBlockData dropBlockData = levelInfo.getDropBlockData();                startBlockDropTimer(dropBlockData.getPeriodBetweenFreqChanges(), dropBlockData.getInitialPeriod(),                        dropBlockData.getPeriodChangeFactor());            }            if (gameDataHolder.getLevelInfo().getScoreType().equals(ScoreType.TIME)) {                gameDataHolder.setCountUpHandler(new Handler());                startCountUpTimer();            }        }    }    public void stopTimersAndHandlerCallbacks() {        if (gameCurrentlyRunning) {            gameCurrentlyRunning = false;            if (countDownTimer != null) {                countDownTimer.cancel();            }            if (gameDataHolder.getBlockDropHandler() != null) {                gameDataHolder.getBlockDropHandler().removeCallbacksAndMessages(null);            }            if (freqHandler != null) {                freqHandler.removeCallbacksAndMessages(null);            }            if (gameDataHolder.getCountUpHandler() != null) {                gameDataHolder.getCountUpHandler().removeCallbacksAndMessages(null);            }            if (gameDataHolder.getCountUpHandler() != null) {                gameDataHolder.getCountUpHandler().removeCallbacksAndMessages(null);            }        }    }    private CountDownTimer startCountDownTimer() {        final LevelInfo levelInfo = gameDataHolder.getLevelInfo();        countDownTimer = new CountDownTimer(levelInfo.getStats().getNumOfMillisLeft(), 500) {            public void onTick(long millisUntilFinished) {                levelInfo.getStats().setNumOfMillisLeft(millisUntilFinished);                if (millisUntilFinished % 1000 <= 10) {                    soundService.playSound(SoundEnum.COUNTDOWN_BEEP);                }            }            public void onFinish() {                gameEndService.startEndGameProcess();            }        };        return countDownTimer.start();    }    private void startCountUpTimer() {        final Stats stats = gameDataHolder.getLevelInfo().getStats();        Runnable runnable = new Runnable() {            @Override            public void run() {                stats.setTimeElapsed(stats.getTimeElapsed() + 1000);                gameDataHolder.getCountUpHandler().postDelayed(this, 1000);            }        };        gameDataHolder.getCountUpHandler().postDelayed(runnable, 1000);        gameDataHolder.setCountUpHandler(gameDataHolder.getCountUpHandler());    }    private void startBlockDropTimer(final int periodBetweenFreqChanges, int initialPeriod, final double periodChangeFactor) {        this.initialPeriod = initialPeriod;        Runnable freqRunnable = new Runnable() {            @Override            public void run() {                int newPeriod = (int) (TimerService.this.initialPeriod * periodChangeFactor);                TimerService.this.initialPeriod = newPeriod < 5 ? 5 : newPeriod;                freqHandler.postDelayed(this, periodBetweenFreqChanges);            }        };        freqHandler = new Handler();        freqHandler.postDelayed(freqRunnable, periodBetweenFreqChanges);        Runnable blockDropRunnable = new Runnable() {            @Override            public void run() {                try {                    gameDataHolder.getLock().lock();                    if (!gridService.topRowHasImage()) {                        if (GameStateHolder.getGameState() != GameState.GRID_LOCKED) {                            Log.d("TimerService", "touch disabled");                            numOfRetries = 0;                            GameStateHolder.setGameState(GameState.GRID_LOCKED);                            gridService.addNewImagesToGrid(gridMappingService, true, false);                            gridMappingService.dropAllBlocks();                            gameDataHolder.getBlockDropHandler().postDelayed(this, TimerService.this.initialPeriod);                        } else {                            if (numOfRetries < 25) {                                gameDataHolder.getBlockDropHandler().postDelayed(this, 25);                                numOfRetries++;                            } else {                                throw new HandlerException("TimerService: Runaway exception!!! :(");                            }                        }                    }                    gameDataHolder.getLock().unlock();                } catch (InterruptedException | HandlerException e) {                    e.printStackTrace();                }            }        };        gameDataHolder.getBlockDropHandler().postDelayed(blockDropRunnable, this.initialPeriod);    }}