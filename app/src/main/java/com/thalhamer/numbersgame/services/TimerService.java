package com.thalhamer.numbersgame.services;import android.os.CountDownTimer;import android.os.Handler;import android.util.Log;import com.thalhamer.numbersgame.Exception.HandlerException;import com.thalhamer.numbersgame.domain.DropBlockData;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.domain.GridMapping;import com.thalhamer.numbersgame.domain.LevelInfo;import com.thalhamer.numbersgame.domain.Stats;import com.thalhamer.numbersgame.enums.GameState;import com.thalhamer.numbersgame.enums.GameType;import com.thalhamer.numbersgame.enums.sounds.SoundEnum;import com.thalhamer.numbersgame.viewhelper.GameStateHolder;import javax.inject.Inject;import javax.inject.Singleton;/** * Timer Service * <p/> * Created by Brian on 4/24/2015. */@Singletonpublic class TimerService {    @Inject    GameDataHolder gameDataHolder;    @Inject    LevelEndService levelEndService;    @Inject    GridService gridService;    @Inject    GridMappingService gridMappingService;    @Inject    SoundService soundService;    private int numOfRetries = 0;    private CountDownTimer countDownTimer;    private int initialPeriod;    private boolean gameCurrentlyRunning = false;    /**     * can be used for start or restart of timers and callbacks     */    public void startTimersAndHandlerCallbacks() {        if (!gameCurrentlyRunning) {            gameCurrentlyRunning = true;            LevelInfo levelInfo = gameDataHolder.getLevelInfo();            gameDataHolder.setBlockDropHandler(new Handler());            if (levelInfo.getGameType().equals(GameType.TIMED)) {                startCountDownTimer();            } else if (GameType.DROP.equals(levelInfo.getGameType())) {                DropBlockData dropBlockData = levelInfo.getDropBlockData();                startBlockDropTimer(dropBlockData);            }        }    }    public void stopTimersAndHandlerCallbacks() {        if (gameCurrentlyRunning) {            gameCurrentlyRunning = false;            if (countDownTimer != null) {                countDownTimer.cancel();            }            if (gameDataHolder.getBlockDropHandler() != null) {                gameDataHolder.getBlockDropHandler().removeCallbacksAndMessages(null);            }            if (gameDataHolder.getCountUpHandler() != null) {                gameDataHolder.getCountUpHandler().removeCallbacksAndMessages(null);            }            if (gameDataHolder.getCountUpHandler() != null) {                gameDataHolder.getCountUpHandler().removeCallbacksAndMessages(null);            }        }    }    private CountDownTimer startCountDownTimer() {        final LevelInfo levelInfo = gameDataHolder.getLevelInfo();        countDownTimer = new CountDownTimer(levelInfo.getStats().getNumOfMillisLeft(), 500) {            public void onTick(long millisUntilFinished) {                levelInfo.getStats().setNumOfMillisLeft(millisUntilFinished);                if (millisUntilFinished % 1000 <= 10) {                    soundService.playSound(SoundEnum.COUNTDOWN_BEEP);                }            }            public void onFinish() {                levelEndService.startEndGameProcess();            }        };        return countDownTimer.start();    }    private void startCountUpTimer() {        final Stats stats = gameDataHolder.getLevelInfo().getStats();        Runnable runnable = new Runnable() {            @Override            public void run() {                stats.setTimeElapsed(stats.getTimeElapsed() + 1000);                gameDataHolder.getCountUpHandler().postDelayed(this, 1000);            }        };        gameDataHolder.getCountUpHandler().postDelayed(runnable, 1000);        gameDataHolder.setCountUpHandler(gameDataHolder.getCountUpHandler());    }    private void startBlockDropTimer(DropBlockData dropBlockData) {        this.initialPeriod = dropBlockData.getInitialPeriod();        startPeriodicBlockDrop(dropBlockData);    }    private void startPeriodicBlockDrop(final DropBlockData dropBlockData) {        Runnable blockDropRunnable = new Runnable() {            @Override            public void run() {                try {                    gameDataHolder.getGridLock().lock();                    if (GameStateHolder.getGameState() != GameState.GRID_LOCKED) {                        Log.d("TimerService", "touch disabled");                        numOfRetries = 0;                        GameStateHolder.setGameState(GameState.GRID_LOCKED);                        performBlockDropTasks();                        double periodChangeFactor = dropBlockData.getPeriodChangeFactor();                        int newPeriod = (int) (TimerService.this.initialPeriod * periodChangeFactor);                        TimerService.this.initialPeriod = newPeriod < 5 ? 5 : newPeriod;                        gameDataHolder.getBlockDropHandler().postDelayed(this, TimerService.this.initialPeriod);                    } else {                        if (numOfRetries < 40) {                            gameDataHolder.getBlockDropHandler().postDelayed(this, 100);                            numOfRetries++;                        } else {                            throw new HandlerException("TimerService: Runaway exception!!! :(");                        }                    }                    gameDataHolder.getGridLock().unlock();                } catch (InterruptedException | HandlerException e) {                    numOfRetries = 0;                    e.printStackTrace();                }            }        };        gameDataHolder.getBlockDropHandler().postDelayed(blockDropRunnable, this.initialPeriod);    }    private void performBlockDropTasks() {        if (!gridService.topRowHasImage()) {            Log.d("TimerService", "periodic block drop started");            gridService.addNewImagesToGrid(gridMappingService, true, false);            final GridMapping gridMapping = gridService.createGridMapping(true);            gridMappingService.dropAllBlocks(gridMapping);        }    }}