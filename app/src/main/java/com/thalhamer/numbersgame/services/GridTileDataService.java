package com.thalhamer.numbersgame.services;import android.app.Activity;import android.graphics.Color;import android.util.TypedValue;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.TextView;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.R;import com.thalhamer.numbersgame.domain.GridData;import com.thalhamer.numbersgame.domain.Image;import com.thalhamer.numbersgame.domain.Tile;import com.thalhamer.numbersgame.enums.SpecialTile;import com.thalhamer.numbersgame.enums.TileAttribute;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.EnumSet;import java.util.Map;import javax.inject.Inject;import javax.inject.Singleton;/** * grid tile data service * <p/> * Created by Brian on 10/30/2015. */@Singletonpublic class GridTileDataService {    public static final String GLASS = "Glass";    public static final String LEPRECHAUN = "Leprechaun";    @Inject  //here to bypass weird injection rule for dagger    public GridTileDataService() {    }    public Integer[][] getGridTileData(JSONObject object) throws JSONException {        Integer[][] gridTileData = null;        if (object.has("gridTileData")) {            JSONArray fullArray = object.getJSONArray("gridTileData");            gridTileData = new Integer[fullArray.length()][];            for (int i = 0; i < fullArray.length(); i++) {                String rowData = (String) fullArray.get(i);                String[] singleRowArray = rowData.replace(" ", "").split(",");                gridTileData[i] = new Integer[singleRowArray.length];                for (int j = 0; j < singleRowArray.length; j++) {                    gridTileData[i][j] = Integer.valueOf(singleRowArray[j]);                }            }        }        return gridTileData;    }    public Map<Object, String> getGridTileDataDescriptions(Integer[][] gridTileData) {        Map<Object, String> tasks = Maps.newHashMap();        if (tileAttributesExistsInGridTileData(gridTileData, TileAttribute.glassTileAttributes())) {            tasks.put(GLASS, "- Break all the glass.");        }        if (gridTileDataContainsInt(gridTileData, SpecialTile.LEPRECHAUN.getMapValue())) {            tasks.put(LEPRECHAUN, "- Catch all the leprechauns!");        }        return tasks;    }    /**     * @param activity     * @param extraTasks     * @param extraTaskTitle     * @param taskLayout     * @param gridData     * @return all tasks were completed     */    public boolean setExtraTaskDescriptions(Activity activity, Map<Object, String> extraTasks, TextView extraTaskTitle,                                            LinearLayout taskLayout, GridData gridData) {        boolean allTasksCompleted = true;        for (Object o : extraTasks.entrySet()) {            Map.Entry task = (Map.Entry) o;            TextView taskTextView = new TextView(activity);            taskTextView.setTextColor(Color.WHITE);            int red = App.getContext().getResources().getColor(R.color.gameRed);            if (gridData != null && !isExtraTaskCompleted(gridData, task)) {                taskTextView.setTextColor(red);                extraTaskTitle.setTextColor(red);                allTasksCompleted = false;            }            taskTextView.setTextSize(TypedValue.COMPLEX_UNIT_PX, activity.getResources().getDimensionPixelSize(R.dimen.level_info_desc_textSize));            taskTextView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,                    ViewGroup.LayoutParams.WRAP_CONTENT));            taskTextView.setText((String) task.getValue());            taskLayout.addView(taskTextView);        }        return allTasksCompleted;    }    public boolean isExtraTaskCompleted(GridData gridData, Map.Entry task) {        if (task.getKey().equals(GLASS)) {            return !gridHasTileAttributes(gridData, TileAttribute.glassTileAttributes());        } else if (task.getKey().equals(LEPRECHAUN)) {            return !gridHasSpecialTiles(gridData, EnumSet.of(SpecialTile.LEPRECHAUN));        }        return false;    }    public boolean finishedAllExtraTasks(GridData gridData, Integer[][] gridTileData) {        Map<Object, String> extraTasks = getGridTileDataDescriptions(gridTileData);        for (Object o : extraTasks.entrySet()) {            Map.Entry task = (Map.Entry) o;            if (!isExtraTaskCompleted(gridData, task)) {                return false;            }        }        return true;    }    public boolean gridHasTileAttributes(GridData gridData, EnumSet<TileAttribute> tileAttributes) {        for (ArrayList<Tile> currCol : gridData.getGrid()) {            for (Tile tile : currCol) {                if (tileAttributes.contains(tile.getTileAttribute())) {                    return true;                }            }        }        return false;    }    public boolean gridHasSpecialTiles(GridData gridData, EnumSet<SpecialTile> specialTiles) {        for (ArrayList<Tile> currCol : gridData.getGrid()) {            for (Tile tile : currCol) {                Image image = tile.getImage();                if (image != null && image.getSpecialTile() != null && specialTiles.contains(image.getSpecialTile())) {                    return true;                }            }        }        return false;    }    public boolean tileAttributesExistsInGridTileData(Integer[][] gridTileData, EnumSet<TileAttribute> tileAttributes) {        for (TileAttribute tileAttribute : tileAttributes) {            if (gridTileDataContainsInt(gridTileData, tileAttribute.getMappedInteger())) {                return true;            }        }        return false;    }    private boolean gridTileDataContainsInt(Integer[][] gridTileData, int value) {        for (Integer[] column : gridTileData) {            if (Lists.newArrayList(column).contains(value)) {                return true;            }        }        return false;    }}