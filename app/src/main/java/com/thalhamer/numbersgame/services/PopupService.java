package com.thalhamer.numbersgame.services;import android.app.Activity;import android.content.Intent;import android.graphics.Color;import android.graphics.Point;import android.os.Handler;import android.util.TypedValue;import android.view.Display;import android.view.Gravity;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.FrameLayout;import android.widget.GridLayout;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import com.google.common.collect.Lists;import com.thalhamer.numbersgame.Activity.ChooseLevelActivity;import com.thalhamer.numbersgame.Activity.GameActivity;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.R;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.domain.GameUnlock;import com.thalhamer.numbersgame.domain.IapPower;import com.thalhamer.numbersgame.domain.LevelData;import com.thalhamer.numbersgame.domain.LevelInfo;import com.thalhamer.numbersgame.domain.Power;import com.thalhamer.numbersgame.domain.StarsInfo;import com.thalhamer.numbersgame.domain.Stats;import com.thalhamer.numbersgame.enums.CalcType;import com.thalhamer.numbersgame.enums.Character;import com.thalhamer.numbersgame.enums.MessageLocation;import com.thalhamer.numbersgame.enums.MessageType;import com.thalhamer.numbersgame.enums.PowerEnum;import com.thalhamer.numbersgame.enums.ScoreType;import com.thalhamer.numbersgame.enums.sounds.SoundEnum;import com.thalhamer.numbersgame.util.IabHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.util.List;import java.util.Map;import javax.inject.Inject;import javax.inject.Singleton;/** * perform popup services * <p/> * Created by Brian on 8/19/2015. */@Singletonpublic class PopupService {    public static final int TIME_BETWEEN_MESSAGE_WRITE = 50;    @Inject    GameDataHolder gameDataHolder;    @Inject    StarsAndUnlockService starsAndUnlockService;    @Inject    MessageService messageService;    GridTileDataService gridTileDataService = new GridTileDataService();    private SavedDataService savedDataService = new SavedDataService();    private JsonService jsonService = new JsonService();    public PopupWindow createLevelInfoPopup(final Activity activity, final LevelData levelData,                                            ViewGroup currentView, boolean hideStartButton) throws JSONException, IOException {        String sectionName = savedDataService.constructSectionName(levelData.getEpic(), levelData.getSection());        String sectionJsonInfo = jsonService.getJsonDataFromResource(sectionName, "raw");        JSONArray jsonArray = new JSONArray(sectionJsonInfo);        JSONObject levelObject = jsonArray.getJSONObject(levelData.getLevel() - 1);        View popupView = activity.getLayoutInflater().inflate(R.layout.popup_level_info, currentView, false);        TextView levelTextView = (TextView) popupView.findViewById(R.id.popUpLevelTitle);        String text = String.format("Level %s-%s", levelData.getSection(), levelData.getLevel());        levelTextView.setText(text);        TextView gameTypetextView = (TextView) popupView.findViewById(R.id.gameType);        String gameDescription = jsonService.getGameDescription(levelObject);        gameTypetextView.setText(gameDescription);        //get and reset extra task related views        LinearLayout taskLayout = (LinearLayout) popupView.findViewById(R.id.otherTasks);        taskLayout.removeAllViews();        TextView extraTasksTitle = (TextView) popupView.findViewById(R.id.extraTasks);        extraTasksTitle.setVisibility(View.GONE);        Integer[][] gridTileData = gridTileDataService.getGridTileData(levelObject);        if (gridTileData != null) {            Map<Object, String> extraTasks = gridTileDataService.getGridTileDataDescriptions(gridTileData);            if (!extraTasks.isEmpty()) {                extraTasksTitle.setVisibility(View.VISIBLE);                gridTileDataService.setExtraTaskDescriptionsInLinearLayout(activity, extraTasks, taskLayout, null);            }        }        String levelName = savedDataService.constructLevelName(levelData);        StarsInfo starsInfo = new StarsAndUnlockService().getStarsInfo(levelObject, levelName);        ScoreType scoreType = ScoreType.valueOf(levelObject.getString("scoreType"));        TextView star1TextView = (TextView) popupView.findViewById(R.id.star1Points);        star1TextView.setText(String.format("%d %s", starsInfo.getMinForOneStar(), scoreType.getPopupSuffix()));        TextView star2TextView = (TextView) popupView.findViewById(R.id.star2Points);        star2TextView.setText(String.format("%d %s", starsInfo.getMinForTwoStars(), scoreType.getPopupSuffix()));        TextView star3TextView = (TextView) popupView.findViewById(R.id.star3Points);        star3TextView.setText(String.format("%d %s", starsInfo.getMinForThreeStars(), scoreType.getPopupSuffix()));        GridLayout gridLayout = (GridLayout) popupView.findViewById(R.id.currStarsGrid);        for (int i = 0; i < gridLayout.getColumnCount(); i++) {            ImageView imageView = (ImageView) gridLayout.getChildAt(i);            if (Integer.valueOf((String) imageView.getTag()) > starsInfo.getCurrentNumOfStars()) {                imageView.setBackgroundResource(R.mipmap.star_empty_blk);            }        }        Button startButton = (Button) popupView.findViewById(R.id.startButton);        if (hideStartButton) {            startButton.setVisibility(View.INVISIBLE);        } else {            startButton.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    SoundEnum.CLICK1.getMediaPlayer().start();                    Intent intent = new Intent(activity, GameActivity.class);                    intent.putExtra(activity.getString(R.string.epic), levelData.getEpic());                    intent.putExtra(activity.getString(R.string.section), levelData.getSection());                    intent.putExtra(activity.getString(R.string.CHOSEN_LEVEL), levelData.getLevel());                    activity.startActivity(intent);                }            });        }        final PopupWindow popupWindow = createPopupWindow(popupView, currentView, activity, false);        ImageButton cancelButton = (ImageButton) popupView.findViewById(R.id.cancel);        cancelButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SoundEnum.CLICK1.getMediaPlayer().start();                popupWindow.dismiss();            }        });        return popupWindow;    }    public PopupWindow createGameExplanationPopup(Activity activity, ViewGroup currentView, List<Object> enums) {        FrameLayout popupLayout = (FrameLayout) activity.getLayoutInflater().inflate(R.layout.popup_game_explanation,                currentView, false);        final Animation slideOutLeft = AnimationUtils.loadAnimation(activity, R.anim.slide_out_left);        final Animation slideInRight = AnimationUtils.loadAnimation(activity, R.anim.slide_in_right);        final List<View> gameExplanationViews = Lists.newArrayList();        for (Object enumObject : enums) {            final View enumView = activity.getLayoutInflater().inflate(R.layout.game_explanation, popupLayout, false);            TextView title = (TextView) enumView.findViewById(R.id.title);            TextView description = (TextView) enumView.findViewById(R.id.description);            ImageView imageView = (ImageView) enumView.findViewById(R.id.image);            if (enumObject instanceof CalcType) {                title.setText("Operation");                description.setText(((CalcType) enumObject).getDescription());                imageView.setImageResource(((CalcType) enumObject).getExplanationId());            } else if (enumObject instanceof ScoreType) {                title.setText("Score");                description.setText(((ScoreType) enumObject).getFullGameDescription());                imageView.setImageResource(((ScoreType) enumObject).getExplanationId());            }            popupLayout.addView(enumView);            gameExplanationViews.add(enumView);        }        final PopupWindow popupWindow = createPopupWindow(popupLayout, currentView, activity, true);        for (int i = 0; i < gameExplanationViews.size(); i++) {            final View view = gameExplanationViews.get(i);            if (i > 0) {                view.setVisibility(View.GONE);            }            Button continueButton = (Button) view.findViewById(R.id.continueButton);            if (i < gameExplanationViews.size() - 1) {                continueButton.setText("Next");                final Integer currViewIndex = i;                continueButton.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        SoundEnum.CLICK1.getMediaPlayer().start();                        view.setVisibility(View.GONE);                        view.startAnimation(slideOutLeft);                        View nextView = gameExplanationViews.get(currViewIndex + 1);                        nextView.setVisibility(View.VISIBLE);                        nextView.startAnimation(slideInRight);                    }                });            } else {                continueButton.setText("Got it!");                continueButton.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        SoundEnum.CLICK1.getMediaPlayer().start();                        if (gameDataHolder != null) {                            gameDataHolder.setPopupScreenOpen(false);                            gameDataHolder.getGameActivity().resumeGame();                        }                        popupWindow.dismiss();                    }                });            }        }        return popupWindow;    }    public void createSectionUnlockedPopup(final Activity activity, final ViewGroup currentView, GameUnlock gameUnlock) {        final View popupView = activity.getLayoutInflater().inflate(R.layout.popup_unlocked_section,                currentView, false);        TextView textView = (TextView) popupView.findViewById(R.id.title);        Character character = Character.getCharacterFromEpic(gameDataHolder.getLevelData().getEpic());        if (character != null) {            String text = String.format("You unlocked %s's Section %s!", character.getName(), gameDataHolder.getLevelData().getSection());            textView.setText(text);        }        GridLayout gridLayout = (GridLayout) popupView.findViewById(R.id.powerGrid);        gridLayout.removeAllViews();        for (Power power : gameUnlock.getPowers()) {            ImageView imageView = new ImageView(activity.getBaseContext());            int imageLength = activity.getResources().getDimensionPixelSize(R.dimen.unlocked_screen_gridImage_sideLength);            FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(imageLength, imageLength);            imageView.setLayoutParams(lp);            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);            imageView.setBackgroundResource(power.getPowerEnum().getImageResourceId());            gridLayout.addView(imageView);            TextView numOfPowers = new TextView(activity.getBaseContext());            int powerTextSize = (int) (activity.getResources().getDimension(R.dimen.unlocked_screen_power_textSize) /                    activity.getResources().getDisplayMetrics().density);            numOfPowers.setTextSize(TypedValue.COMPLEX_UNIT_SP, powerTextSize);            numOfPowers.setText(String.format("%s%d", " x", power.getQuantity()));            numOfPowers.setTextColor(Color.WHITE);            gridLayout.addView(numOfPowers);        }        final PopupWindow popupWindow = createPopupWindow(popupView, currentView, activity, true);        Button okButton = (Button) popupView.findViewById(R.id.okButton);        okButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SoundEnum.CLICK1.getMediaPlayer().start();                popupWindow.dismiss();                createEndGamePopup(activity, currentView);            }        });    }    public void createEndGamePopup(Activity activity, ViewGroup currentView) {        LevelInfo levelInfo = gameDataHolder.getLevelInfo();        final View popupView = activity.getLayoutInflater().inflate(R.layout.popup_end_game, currentView, false);        Stats stats = levelInfo.getStats();        StarsInfo starsInfo = stats.getStarsInfo();        int numOfStars = starsAndUnlockService.getNumOfStarsEarned(starsInfo, levelInfo.getStats().getScore());        GridLayout gridLayout = (GridLayout) popupView.findViewById(R.id.starGrid);        for (int i = 0; i < gridLayout.getColumnCount(); i++) {            ImageView imageView = (ImageView) gridLayout.getChildAt(i);            if (Integer.valueOf((String) imageView.getTag()) > numOfStars) {                imageView.setBackgroundResource(R.mipmap.star_empty_blk);            }        }        TextView scoreTextView = (TextView) popupView.findViewById(R.id.score);        String scoreSuffix = levelInfo.getScoreType().getPopupSuffix();        String score = String.format("Score: %s " + scoreSuffix, stats.getScore());        scoreTextView.setText(score);        //get and reset extra task related views        LinearLayout taskLayout = (LinearLayout) popupView.findViewById(R.id.otherTasks);        taskLayout.removeAllViews();        TextView extraTasksTitle = (TextView) popupView.findViewById(R.id.extraTasks);        extraTasksTitle.setVisibility(View.GONE);        if (levelInfo.getGridTileData() != null) {            Map<Object, String> extraTasks = gridTileDataService.getGridTileDataDescriptions(levelInfo.getGridTileData());            if (!extraTasks.isEmpty()) {                extraTasksTitle.setVisibility(View.VISIBLE);                gridTileDataService.setExtraTaskDescriptionsInLinearLayout(activity, extraTasks, taskLayout, levelInfo.getGridData());            }        }        createPopupWindow(popupView, currentView, activity, true);        createEndGameThoughtBubbleAndButtons(popupView, numOfStars, activity);    }    private void createEndGameThoughtBubbleAndButtons(final View popupView, int numOfStars, final Activity activity) {        final TextView thoughtBubbleText = (TextView) popupView.findViewById(R.id.thought_bubble_text);        MessageType messageType = numOfStars > 1 ? MessageType.POSITIVE : MessageType.NEGATIVE;        com.thalhamer.numbersgame.enums.Character character = Character.getCharacterFromEpic(gameDataHolder.getLevelData().getEpic());        final String message = messageService.getRandomGameMessage(character, messageType, MessageLocation.AFTER_GAME);        final Handler textHandler = new Handler();        Runnable textRunnable = new Runnable() {            private String currentText = "";            private int currentMessageIndex = 0;            @Override            public void run() {                currentText += message.charAt(currentMessageIndex);                thoughtBubbleText.setText(currentText);                currentMessageIndex++;                if (currentMessageIndex == message.length()) {                    activateEndGameButtons(popupView, activity);                } else {                    textHandler.postDelayed(this, TIME_BETWEEN_MESSAGE_WRITE);                }            }        };        textHandler.postDelayed(textRunnable, TIME_BETWEEN_MESSAGE_WRITE);    }    private void activateEndGameButtons(View popupView, final Activity activity) {        ImageButton levelScreenButton = (ImageButton) popupView.findViewById(R.id.levelScreenButton);        levelScreenButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SoundEnum.CLICK1.getMediaPlayer().start();                LevelData levelData = gameDataHolder.getLevelData();                Intent intent = new Intent(activity, ChooseLevelActivity.class);                intent.putExtra(activity.getString(R.string.epic), levelData.getEpic());                intent.putExtra(activity.getString(R.string.section), levelData.getSection());                activity.startActivity(intent);            }        });        Button retryButton = (Button) popupView.findViewById(R.id.retryButton);        retryButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SoundEnum.CLICK1.getMediaPlayer().start();                LevelData levelData = gameDataHolder.getLevelData();                Intent intent = new Intent(activity, GameActivity.class);                intent.putExtra(activity.getString(R.string.CHOSEN_LEVEL), levelData.getLevel());                intent.putExtra(activity.getString(R.string.epic), levelData.getEpic());                intent.putExtra(activity.getString(R.string.section), levelData.getSection());                activity.startActivity(intent);            }        });        Button nextButton = (Button) popupView.findViewById(R.id.nextButton);        nextButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SoundEnum.CLICK1.getMediaPlayer().start();                Intent intent = new Intent(activity, GameActivity.class);                LevelData nextLevelData = starsAndUnlockService.getNextLevel(gameDataHolder.getLevelData());                intent.putExtra(activity.getString(R.string.CHOSEN_LEVEL), nextLevelData.getLevel());                intent.putExtra(activity.getString(R.string.epic), nextLevelData.getEpic());                intent.putExtra(activity.getString(R.string.section), nextLevelData.getSection());                activity.startActivity(intent);            }        });    }    public PopupWindow createIapStorePopup(final Activity activity, ViewGroup currentView, PowerEnum powerEnum, InAppPurchaseService inAppPurchaseService) {        gameDataHolder.setPopupScreenOpen(true);        if (activity instanceof GameActivity) {            ((GameActivity) activity).pauseGame();        }        //initialize layout        final RelativeLayout fullLayout = (RelativeLayout) activity.getLayoutInflater().inflate(R.layout.buy_power_full_store, currentView, false);        fullLayout.removeView(fullLayout.findViewById(R.id.samplePowerTab));        fullLayout.removeView(fullLayout.findViewById(R.id.samplePowerImage));        IabHelper mHelper = null;        if (activity instanceof GameActivity) {            mHelper = ((GameActivity) activity).getmHelper();        }        List<IapPower> iapPowers = Lists.newArrayList();        int firstTabImageMargin = App.getContext().getResources().getDimensionPixelSize(R.dimen.buy_power_tabImage1_left);        int tabImageIncrement = App.getContext().getResources().getDimensionPixelSize(R.dimen.buy_power_tabImage_increment);        int currentTabImageMargin = firstTabImageMargin;        List<ImageView> viewsToAlwaysKeepInFront = Lists.newArrayList();        View tabToInitiallyBringToFront = null;        //create tab views (the main event)        for (PowerEnum currentPowerEnum : PowerEnum.values()) {            View powerView = createIapBuyView(activity, currentView, currentPowerEnum);            fullLayout.addView(powerView);            ImageView clickableTabImage = createPowerTabImage(activity, PowerEnum.CLEAR_ONE_ENUM, currentTabImageMargin);            currentTabImageMargin += tabImageIncrement;            fullLayout.addView(clickableTabImage);            viewsToAlwaysKeepInFront.add(clickableTabImage);            if (powerEnum.equals(currentPowerEnum)) {                tabToInitiallyBringToFront = powerView;            }            iapPowers.add(new IapPower(powerView, clickableTabImage, currentPowerEnum));        }        inAppPurchaseService.setPowerBuyDetails(activity, mHelper, iapPowers);        final PopupWindow popupWindow = createPopupWindow(fullLayout, currentView, activity, false);        final ImageButton cancelButton = (ImageButton) fullLayout.findViewById(R.id.cancel);        cancelButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SoundEnum.CLICK1.getMediaPlayer().start();                popupWindow.dismiss();                if (activity instanceof GameActivity) {                    gameDataHolder.setPopupScreenOpen(false);                    ((GameActivity) activity).resumeGame();                }            }        });        viewsToAlwaysKeepInFront.add(cancelButton);        //create tab image button listeners        for (IapPower iapPower : iapPowers) {            createTabPowerImageClickListener(iapPower.getClickableTabImage(), iapPower.getPowerView(), viewsToAlwaysKeepInFront);        }        if (tabToInitiallyBringToFront != null) {            tabToInitiallyBringToFront.bringToFront();        }        bringImageViewsToFront(viewsToAlwaysKeepInFront);        return popupWindow;    }    private View createIapBuyView(Activity activity, ViewGroup currentView, PowerEnum powerEnum) {        final View powerView = activity.getLayoutInflater().inflate(R.layout.buy_power, currentView, false);        powerView.setBackgroundResource(powerEnum.getTabImageId());        ImageView powerImage = (ImageView) powerView.findViewById(R.id.powerImage);        powerImage.setBackgroundResource(powerEnum.getImageResourceId());        return powerView;    }    private ImageView createPowerTabImage(Activity activity, PowerEnum powerEnum, int marginLeft) {        ImageView tabImage = new ImageView(activity.getApplicationContext());        tabImage.setBackgroundResource(powerEnum.getImageResourceId());        int sideLength = App.getContext().getResources().getDimensionPixelSize(R.dimen.buy_power_buyImage_nestedImage_sideLength);        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(sideLength, sideLength);        tabImage.setLayoutParams(lp);        int marginTop = App.getContext().getResources().getDimensionPixelSize(R.dimen.buy_power_tabImages_top);        lp.setMargins(marginLeft, marginTop, 0, 0);        tabImage.setLayoutParams(lp);        return tabImage;    }    private void createTabPowerImageClickListener(ImageView powerTabImage, final View viewToLinkTo, final List<ImageView> bringForwardViews) {        powerTabImage.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SoundEnum.CLICK1.getMediaPlayer().start();                viewToLinkTo.bringToFront();                bringImageViewsToFront(bringForwardViews);            }        });    }    private void bringImageViewsToFront(final List<ImageView> bringForwardViews) {        for (ImageView imageView : bringForwardViews) {            imageView.bringToFront();        }    }    //common to all popup windows    private PopupWindow createPopupWindow(View popupView, final ViewGroup currentView, Activity activity, boolean setFullScreen) {        final PopupWindow popupWindow = new PopupWindow(popupView);        if (setFullScreen) {            Display display = activity.getWindowManager().getDefaultDisplay();            Point size = new Point();            display.getSize(size);            int width = size.x;            int height = size.y;            popupWindow.setWidth((int) (width * .95f));            popupWindow.setHeight((int) (height * .95f));        } else {            popupWindow.setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);            popupWindow.setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);        }        popupWindow.setFocusable(true);        popupWindow.setOutsideTouchable(false);        popupWindow.setAnimationStyle(R.style.popupAnimation);        popupWindow.showAtLocation(currentView, Gravity.CENTER, 0, 0);        //set background dimming        final RelativeLayout dimmingLayout = (RelativeLayout) activity.getLayoutInflater().inflate(R.layout.dim_fragment, currentView, false);        currentView.addView(dimmingLayout);        popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {            @Override            public void onDismiss() {                currentView.removeView(dimmingLayout);            }        });        return popupWindow;    }}