package com.thalhamer.numbersgame.services;import android.app.Activity;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.LinearGradient;import android.graphics.Paint;import android.graphics.RectF;import android.graphics.Shader;import android.os.CountDownTimer;import android.os.Handler;import android.util.Log;import android.view.MotionEvent;import android.view.ViewGroup;import com.google.common.collect.Lists;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.R;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.domain.GridData;import com.thalhamer.numbersgame.domain.GridMapping;import com.thalhamer.numbersgame.domain.LevelInfo;import com.thalhamer.numbersgame.domain.PopupResult;import com.thalhamer.numbersgame.domain.Power;import com.thalhamer.numbersgame.domain.Tile;import com.thalhamer.numbersgame.enums.GameState;import com.thalhamer.numbersgame.enums.GameType;import com.thalhamer.numbersgame.enums.PowerEnum;import com.thalhamer.numbersgame.enums.sounds.SoundEnum;import com.thalhamer.numbersgame.services.popup.IAPPopupService;import com.thalhamer.numbersgame.viewhelper.ActivityHelper;import com.thalhamer.numbersgame.viewhelper.GameConstants;import com.thalhamer.numbersgame.viewhelper.GameStateHolder;import com.thalhamer.numbersgame.viewhelper.MainGamePanel;import com.thalhamer.numbersgame.viewhelper.TouchStateHolder;import java.util.List;import javax.inject.Inject;import javax.inject.Singleton;/** * Power service * <p/> * Created by Brian on 4/24/2015. */@Singletonpublic class PowerService {    @Inject    GridService gridService;    @Inject    GameDataHolder gameDataHolder;    @Inject    SavedDataService savedDataService;    @Inject    IAPPopupService iapPopupService;    @Inject    SoundService soundService;    private ActivityHelper activityHelper = new ActivityHelper();    private Paint powerCountPaint;    private Paint topBarPaint;    private int numOfRetries = 0;    private boolean timePowerActivated = false;    private Handler handler = new Handler();    @Inject    public PowerService() {        powerCountPaint = new Paint();        powerCountPaint.setTextSize(App.getContext().getResources().getDimensionPixelSize(R.dimen.powerCountFontSize));        powerCountPaint.setColor(Color.BLACK);        activityHelper.setMainGameFontToViews(powerCountPaint);        topBarPaint = new Paint();        int shaderYdistance = App.getContext().getResources().getDimensionPixelSize(R.dimen.topBarShaderDistance);        Shader shader = new LinearGradient(0, 0, 0, shaderYdistance, App.getContext().getResources().getColor(R.color.gameBackground1),                App.getContext().getResources().getColor(R.color.gameBackground2), Shader.TileMode.MIRROR);        topBarPaint.setShader(shader);    }    public void performPowerIfAnyActive(Tile tile, GridMappingService gridMappingService) {        Power activePower = getActiveMultiusePower();        if (activePower != null) {            TouchStateHolder.setTouchState(GridData.TouchState.DISABLED);            switch (activePower.getPowerEnum()) {                case CLEAR_ONE_NUM:                    performBlockDeletion(tile, Lists.newArrayList(tile), gridMappingService);                    break;                case CLEAR_ALL_NUM:                    List<Tile> tilesToRemove = gridService.getAllTilesWithNum(tile);                    performBlockDeletion(tile, tilesToRemove, gridMappingService);                    break;            }            reducePowerQuantity(activePower);            tile.setTouched(false);        }    }    public void performBlockDeletion(final Tile tile, final List<Tile> tilesToRemove, final GridMappingService gridMappingService) {        try {            gameDataHolder.getGridLock().lock();            if (GameStateHolder.getGameState() != GameState.GRID_LOCKED) {                Log.d("InitialLevelService", "touch disabled");                numOfRetries = 0;                GameStateHolder.setGameState(GameState.GRID_LOCKED);                runValidInputTasks(tile, tilesToRemove, gridMappingService);            } else {                if (numOfRetries < 40) {                    numOfRetries++;                    Runnable blockDropRunnable = new Runnable() {                        @Override                        public void run() {                            performBlockDeletion(tile, tilesToRemove, gridMappingService);                        }                    };                    handler.postDelayed(blockDropRunnable, 100);                    Log.d("MotionEventService", "delayed");                }            }            gameDataHolder.getGridLock().unlock();        } catch (InterruptedException e) {            numOfRetries = 0;            e.printStackTrace();        }    }    private void runValidInputTasks(final Tile tile, final List<Tile> tilesToRemove, final GridMappingService gridMappingService) {        Log.d("InitialLevelService", "power block deletion started");        tile.setTouched(false);        gridMappingService.explosionAnimation(tilesToRemove);        gridService.reduceTileAttribute(tilesToRemove);        final GridMapping gridMapping = gridService.createGridMapping(true);        gridMapping.setDueToPower(true);        gridMapping.setTilesToRemove(tilesToRemove);        gridMappingService.shrinkTouchedTiles(gridMapping);    }    private void reducePowerQuantity(Power activePower) {        activePower.setQuantity(activePower.getQuantity() - 1);        savedDataService.saveKey(activePower.getPowerEnum().toString(), activePower.getQuantity());    }    public void updateStoredPowerQuantity(PowerEnum powerEnum, int numToAdd) {        if (savedDataService == null) {            savedDataService = new SavedDataService();        }        int currentPowerCount = savedDataService.getIntKeyValue(powerEnum.toString(), -1);        int valueToSave = currentPowerCount + numToAdd;        savedDataService.saveKey(powerEnum.toString(), valueToSave);        //if game is in session, must update visual quantity immediately        if (gameDataHolder != null) {            for (Power power : gameDataHolder.getLevelInfo().getPowers()) {                if (powerEnum.equals(power.getPowerEnum())) {                    power.setQuantity(power.getQuantity() + numToAdd);                }            }        }    }    public boolean willHaveMoreThanMaxPowerQuantity(PowerEnum powerEnum, int numToAdd) {        if (savedDataService == null) {            savedDataService = new SavedDataService();        }        int currentQuantity = savedDataService.getIntKeyValue(powerEnum.toString(), -1);        return (currentQuantity + numToAdd) > 99;    }    public void handlePowerClickEvent(MotionEvent event, InAppPurchaseService inAppPurchaseService, final TimerService timerService) {        for (final Power power : gameDataHolder.getLevelInfo().getPowers()) {            if (PowerEnum.PAUSE_TIME.equals(power.getPowerEnum())) {                handlePauseTimePowerClickEvent(event, inAppPurchaseService, timerService, power);            } else {                handleTileClearPowerClickEvent(event, inAppPurchaseService, power);            }            soundService.playSound(SoundEnum.CLICK1);        }    }    private void handleTileClearPowerClickEvent(MotionEvent event, InAppPurchaseService inAppPurchaseService, Power power) {        if (power.getRectF().contains(event.getX(), event.getY())) {            if (power.isTouched()) {                power.setTouched(false);            } else if (power.getQuantity() > 0) {                power.setTouched(true);            } else {                enableIAPView(inAppPurchaseService, power);            }        } else {            power.setTouched(false);        }    }    private void handlePauseTimePowerClickEvent(MotionEvent event, InAppPurchaseService inAppPurchaseService, final TimerService timerService, final Power power) {        if (power.getRectF().contains(event.getX(), event.getY()) && !timePowerActivated) {            if (power.getQuantity() > 0) {                reducePowerQuantity(power);                timePowerActivated = true;                power.setTouched(true);                timerService.stopTimersAndHandlerCallbacks();                performTimeStopPower(timerService, power);            } else {                enableIAPView(inAppPurchaseService, power);            }        }    }    private void performTimeStopPower(final TimerService timerService, final Power power) {        CountDownTimer countDownTimer = new CountDownTimer(GameConstants.PAUSE_TIME_IN_MILLIS, 500) {            public void onTick(long millisUntilFinished) {                if (millisUntilFinished <= 3600) {                    power.setTouched(!power.isTouched());                }            }            public void onFinish() {                timerService.startTimersAndHandlerCallbacks();                gameDataHolder.getLevelInfo().getPowers().remove(power);            }        };        countDownTimer.start();    }    private void enableIAPView(InAppPurchaseService inAppPurchaseService, Power power) {        Activity gameActivity = gameDataHolder.getLevelActivity();        PopupResult popupResult = new PopupResult(gameActivity, (ViewGroup) gameActivity.findViewById(R.id.level_activity));        iapPopupService.buildPopupWindow(popupResult, power.getPowerEnum(), inAppPurchaseService);    }    public Power getActiveMultiusePower() {        for (Power power : gameDataHolder.getLevelInfo().getPowers()) {            if (PowerEnum.multiUse().contains(power) && power.isTouched()) {                return power;            }        }        return null;    }    public void setPowers() {        RectF currentRectF;        float currXPixel = 0.01f * App.getDisplayWidth();        Float tileHeight = getTileHeight();        Float tileWidth = getTileWidth();        for (Power power : gameDataHolder.getLevelInfo().getPowers()) {            Float topOfTile = 0f;            currentRectF = new RectF(currXPixel, topOfTile, currXPixel + tileWidth, topOfTile + tileHeight);            power.setRectF(currentRectF);            currXPixel += tileWidth * 1.5;        }    }    public void drawPowers(Canvas canvas, Paint lightenPaint) {        MainGamePanel gamePanel = gameDataHolder.getGamePanel();        //top bar        canvas.drawRect(0f, 0f, gamePanel.getWidth(), getTileHeight(), topBarPaint);        Paint paint;        if (gameDataHolder.getLevelInfo() != null && gameDataHolder.getLevelInfo().getPowers() != null) {            for (Power power : gameDataHolder.getLevelInfo().getPowers()) {                if (power.isTouched()) {                    paint = lightenPaint;                } else {                    paint = null;                }                canvas.drawBitmap(power.getPowerEnum().getBitmap(), null, power.getRectF(), paint);                canvas.drawText(power.getQuantity().toString(), power.getRectF().right + (getTileWidth() * .1f),                        power.getRectF().centerY(), powerCountPaint);            }        }    }    public Float getTileWidth() {        return getTileHeight();    }    public Float getTileHeight() {        return App.getDisplayHeight() * 0.06f;    }    public List<Power> getListOfPowers(LevelInfo levelInfo) {        List<Power> powers = Lists.newArrayList();        addPowerToPowerList(powers, PowerEnum.CLEAR_ONE_NUM);        addPowerToPowerList(powers, PowerEnum.CLEAR_ALL_NUM);        if (GameType.timePowers().contains(levelInfo.getGameType())) {            addPowerToPowerList(powers, PowerEnum.PAUSE_TIME);        }        return powers;    }    private void addPowerToPowerList(List<Power> powers, PowerEnum powerEnum) {        int powerQuantity = savedDataService.getIntKeyValue(powerEnum.toString(), 0);        Power power = new Power(powerEnum, powerQuantity);        powers.add(power);    }    public void savePowers() {        for (Power power : gameDataHolder.getLevelInfo().getPowers()) {            savedDataService.saveKey(power.getPowerEnum().toString(), power.getQuantity());        }    }}