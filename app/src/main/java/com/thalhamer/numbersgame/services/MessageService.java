package com.thalhamer.numbersgame.services;import android.content.ContentValues;import android.database.Cursor;import android.database.DatabaseUtils;import android.database.sqlite.SQLiteDatabase;import android.os.Handler;import android.util.Log;import com.google.common.collect.Lists;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.database.DatabaseContract;import com.thalhamer.numbersgame.database.DatabaseHelper;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.enums.Character;import com.thalhamer.numbersgame.enums.MessageLocation;import com.thalhamer.numbersgame.enums.MessageType;import java.util.List;import javax.inject.Inject;import javax.inject.Singleton;/** * message service * <p/> * Created by Brian on 7/3/2015. */@Singletonpublic class MessageService {    public static final String GREAT_JOB = "Great Job!";    public static final int EMAIL_THRESHOLD = 7;    @Inject    GameDataHolder gameDataHolder;    DatabaseHelper databaseHelper = new DatabaseHelper(App.getContext());    @Inject    public MessageService() {    }    public void showWrongTotalCharacterMessage(int tilesTotal) {        String message = String.format("That equals %d.", tilesTotal);        initCharacterMessage(message);    }    public boolean initCharacterMessage(String message) {        if (!gameDataHolder.isShowThoughtBubble()) {            gameDataHolder.getThoughtBubbleString().clear();            gameDataHolder.getThoughtBubbleString().append(message);            gameDataHolder.setShowThoughtBubble(true);            int messageTime = 3000;            if (message.length() > 25) {                messageTime = 5000;            }            initThoughtBubbleCloseTimer(messageTime);            return true;        } else {            return false;        }    }    private void initThoughtBubbleCloseTimer(long timeToClose) {        Runnable runnable = new Runnable() {            @Override            public void run() {                gameDataHolder.setShowThoughtBubble(false);            }        };        new Handler().postDelayed(runnable, timeToClose);    }    public String getRandomGameMessage(Character character, MessageType messageType, MessageLocation messageLocation) {        SQLiteDatabase db = databaseHelper.getReadableDatabase();        StringBuilder query = new StringBuilder();        query.append("SELECT message FROM character_message WHERE message_type=? AND message_location=?");        List<String> parameterList = Lists.newArrayList(messageType.toString(), messageLocation.toString());        if (character != null) {            query.append(" AND character=?");            parameterList.add(character.toString());        }        String[] parameters = new String[parameterList.size()];        parameters = parameterList.toArray(parameters);        Cursor c = db.rawQuery(query.toString(), parameters);        int numOfRows = c.getCount();        String message = null;        if (c.moveToFirst()) {            Log.d("curser details", DatabaseUtils.dumpCursorToString(c));            int randomRow = (int) (Math.random() * numOfRows);            c.moveToPosition(randomRow);            message = c.getString(c.getColumnIndex("message")); //Note: needs to be caps (case sensitive for some reason)        } else {            message = GREAT_JOB;        }        c.close();        return message;    }    public void saveScoreResult(String level, Long score, int numOfStarsEarned) {        SQLiteDatabase db = databaseHelper.getWritableDatabase();        ContentValues insertValues = new ContentValues();        insertValues.put(DatabaseContract.ScoreResult.LEVEL, level);        insertValues.put(DatabaseContract.ScoreResult.SCORE, score);        insertValues.put(DatabaseContract.ScoreResult.starsEarned, numOfStarsEarned);        insertValues.put(DatabaseContract.ScoreResult.SENT_FOR_ANALYSIS, convertTinyBoolean(false));        db.insert(DatabaseContract.ScoreResult.TABLE_NAME, null, insertValues);    }    public boolean reachedSendThreshold() {        SQLiteDatabase db = databaseHelper.getReadableDatabase();        Cursor c = db.rawQuery("select count(*) from score_result where sent_for_analysis=0", null);        int count = 0;        if (c.moveToFirst()) {            count = c.getInt(0);        }        c.close();        return count >= EMAIL_THRESHOLD;    }    public String getScoreStatsEmailBody() {        SQLiteDatabase db = databaseHelper.getReadableDatabase();        Cursor c = db.rawQuery("select * from score_result where sent_for_analysis=0", null);        StringBuilder sb = new StringBuilder();        if (c.moveToFirst()) {            Log.d("curser details", DatabaseUtils.dumpCursorToString(c));            do {                String level = c.getString(c.getColumnIndex("level"));                int score = c.getInt(c.getColumnIndex("score"));                int starsEarned = c.getInt(c.getColumnIndex("stars_earned"));                sb.append(String.format("insert into score_result (score_result_id, level_num, score, stars_earned) " +                        "values (score_result_seq.nextval, '%s', %s, %s);\n", level, score, starsEarned));            } while (c.moveToNext());        }        c.close();        return sb.toString();    }    public void updateAllToHaveBeenSent() {        SQLiteDatabase db = databaseHelper.getWritableDatabase();        db.execSQL("update score_result set sent_for_analysis=1 where sent_for_analysis=0");    }    public int convertTinyBoolean(boolean value) {        return value ? 1 : 0;    }}