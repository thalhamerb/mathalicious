package com.thalhamer.numbersgame.Activity;import android.app.Activity;import android.content.Intent;import android.media.AudioManager;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.RelativeLayout;import com.google.android.gms.ads.AdListener;import com.google.common.collect.Lists;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.Modules.AppModule;import com.thalhamer.numbersgame.Modules.GameActivityModule;import com.thalhamer.numbersgame.R;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.domain.GridData;import com.thalhamer.numbersgame.domain.LevelData;import com.thalhamer.numbersgame.domain.LevelInfo;import com.thalhamer.numbersgame.domain.PopupResult;import com.thalhamer.numbersgame.enums.GameExplanation;import com.thalhamer.numbersgame.enums.GameExplanationExtras;import com.thalhamer.numbersgame.enums.GameState;import com.thalhamer.numbersgame.enums.GameType;import com.thalhamer.numbersgame.enums.SpecialTile;import com.thalhamer.numbersgame.enums.TileAttribute;import com.thalhamer.numbersgame.enums.sounds.SoundEnum;import com.thalhamer.numbersgame.services.AdvertisementService;import com.thalhamer.numbersgame.services.GridMappingService;import com.thalhamer.numbersgame.services.GridTileDataService;import com.thalhamer.numbersgame.services.InAppPurchaseService;import com.thalhamer.numbersgame.services.LevelInitiateService;import com.thalhamer.numbersgame.services.PowerService;import com.thalhamer.numbersgame.services.SavedDataService;import com.thalhamer.numbersgame.services.SoundService;import com.thalhamer.numbersgame.services.TimerService;import com.thalhamer.numbersgame.services.popup.LevelExplanationPopupService;import com.thalhamer.numbersgame.services.popup.LevelInfoPopupService;import com.thalhamer.numbersgame.util.IabHelper;import com.thalhamer.numbersgame.viewhelper.GameStateHolder;import com.thalhamer.numbersgame.viewhelper.TouchStateHolder;import java.util.Collections;import java.util.EnumSet;import java.util.List;import javax.inject.Inject;import dagger.ObjectGraph;/** * Game activity */public class LevelActivity extends Activity {    public static final String TAG = "GameActivity";    public static final String BLOCK = "block";    public static final String GLASS = "glass";    private ObjectGraph objectGraph;    @Inject    GameDataHolder gameDataHolder;    @Inject    SavedDataService savedDataService;    @Inject    LevelExplanationPopupService levelExplanationPopupService;    @Inject    LevelInfoPopupService levelInfoPopupService;    @Inject    InAppPurchaseService inAppPurchaseService;    @Inject    AdvertisementService advertisementService;    @Inject    SoundService soundService;    @Inject    LevelInitiateService levelInitiateService;    @Inject    GridMappingService gridMappingService;    @Inject    PowerService powerService;    @Inject    GridTileDataService gridTileDataService;    @Inject    TimerService timerService;    private boolean pauseScreenOpen = false;    private Animation animShowPauseScreen;    private Animation animHidePauseScreen;    private RelativeLayout pauseScreen;    private IabHelper mHelper;    @Override    public void onCreate(Bundle savedInstanceState) {        Log.d("game activity", "on create");        super.onCreate(savedInstanceState);        //set window params        requestWindowFeature(Window.FEATURE_NO_TITLE);        // makes it full screen        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);        setVolumeControlStream(AudioManager.STREAM_MUSIC);        Intent intent = getIntent();        int level = intent.getIntExtra(getString(R.string.CHOSEN_LEVEL), 0);        int epic = intent.getIntExtra(getString(R.string.epic), 0);        int section = intent.getIntExtra(getString(R.string.section), 0);        TouchStateHolder.setTouchState(GridData.TouchState.DISABLED);        GameStateHolder.setGameState(GameState.RUNNING);        ObjectGraph objectGraph = ObjectGraph.create(new AppModule(), new GameActivityModule());        objectGraph.inject(this);        this.objectGraph = objectGraph;        App.setGameActivityObjectGraph(objectGraph);        LevelData levelData = new LevelData(epic, section, level);        gameDataHolder.setLevelData(levelData);        gameDataHolder.setLevelActivity(this);        String sectionName = savedDataService.constructSectionName(levelData.getEpic(), levelData.getSection());        levelInitiateService.initiateLevelData(sectionName, levelData.getLevel());        setContentView(R.layout.level_activity);        levelInitiateService.startBoard();        gridMappingService.setInitialBoard();        powerService.setPowers();        initPauseScreen();        loadAdvertisement();        mHelper = inAppPurchaseService.getInAppPurchaseHelper(this);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        Log.d(TAG, "onActivityResult(" + requestCode + "," + resultCode + "," + data);        // Pass on the activity result to the helper for handling        if (!mHelper.handleActivityResult(requestCode, resultCode, data)) {            // not handled, so handle it ourselves (here's where you'd            // perform any handling of activity results not related to in-app            // billing...            super.onActivityResult(requestCode, resultCode, data);        } else {            Log.d(TAG, "onActivityResult handled by IABUtil.");        }    }    @Override    protected void onPause() {        pauseGame();        super.onPause();    }    @Override    protected void onResume() {        if (!gameDataHolder.isPopupScreenOpen()) {            resumeGame();        }        super.onResume();    }    @Override    protected void onDestroy() {        Log.d("game activity", "Activity is being destroyed");        super.onDestroy();        destroy();    }    private void destroy() {        GameStateHolder.setGameState(GameState.GRID_LOCKED);        TouchStateHolder.setTouchState(GridData.TouchState.DISABLED);        //clear out in app purchase link        if (mHelper != null) mHelper.dispose();        mHelper = null;    }    public void startGame() {        //place to put in timer at beginning for timed games        int soundResId = gameDataHolder.getLevelInfo().getCalcType().getStartGameResourceId();        soundService.playSound(soundResId);        resumeGame();        gameDataHolder.setGameRunning(true);    }    public void pauseGame() {        objectGraph.get(TimerService.class).stopTimersAndHandlerCallbacks();    }    public void resumeGame() {        objectGraph.get(TimerService.class).startTimersAndHandlerCallbacks();    }    private void initPauseScreen() {        pauseScreen = (RelativeLayout) findViewById(R.id.mainGamePause);        pauseScreen.setVisibility(View.GONE);        animShowPauseScreen = AnimationUtils.loadAnimation(this, R.anim.slide_in_bottom);        animHidePauseScreen = AnimationUtils.loadAnimation(this, R.anim.slide_out_bottom);        final LevelData levelData = gameDataHolder.getLevelData();        final LevelInfo levelInfo = gameDataHolder.getLevelInfo();        Button mainGameExitButton = (Button) findViewById(R.id.mainGameExitButton);        mainGameExitButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                SoundEnum.CLICK1.getMediaPlayer().start();                Intent intent = new Intent(LevelActivity.this, ChooseLevelActivity.class);                intent.putExtra(getString(R.string.epic), levelData.getEpic());                intent.putExtra(getString(R.string.section), levelData.getSection());                destroy();                startActivity(intent);            }        });        Button mainGameInfoButton = (Button) findViewById(R.id.mainGameInfoButton);        mainGameInfoButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                SoundEnum.CLICK1.getMediaPlayer().start();                PopupResult popupResult = new PopupResult(LevelActivity.this, (ViewGroup) findViewById(R.id.level_activity));                levelInfoPopupService.buildPopupWindow(popupResult, levelData, false, true);            }        });        Button mainGameExplanationButton = (Button) findViewById(R.id.mainGameExplanationButton);        mainGameExplanationButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                SoundEnum.CLICK1.getMediaPlayer().start();                List<GameExplanation> enums = Lists.newArrayList();                enums.add(levelInfo.getCalcType());                enums.add(levelInfo.getScoreType());                GridData gridData = gameDataHolder.getLevelInfo().getGridData();                if (gridTileDataService.gridHasTileAttributes(gridData, TileAttribute.glassTileAttributes())) {                    enums.add(TileAttribute.Glass1);                }                if (gridTileDataService.gridHasTileAttributes(gridData, TileAttribute.blockTileAttributes())) {                    enums.add(TileAttribute.BLOCK1);                }                if (gridTileDataService.gridHasSpecialTiles(gridData, EnumSet.of(SpecialTile.LEPRECHAUN))) {                    enums.add(SpecialTile.LEPRECHAUN);                }                Collections.addAll(enums, GameExplanationExtras.values());                PopupResult popupResult = new PopupResult(LevelActivity.this, (ViewGroup) findViewById(R.id.level_activity));                popupResult.setDuringGameStart(false);                levelExplanationPopupService.buildPopupWindow(popupResult, enums);            }        });        Button mainGameUnpauseButton = (Button) findViewById(R.id.mainGameUnpauseButton);        mainGameUnpauseButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                SoundEnum.CLICK1.getMediaPlayer().start();                onBackPressed();            }        });    }    private void loadAdvertisement() {        if (App.getmInterstitialAd() != null && App.getmInterstitialAd().isLoaded()) {            App.getmInterstitialAd().setAdListener(new AdListener() {                @Override                public void onAdClosed() {                    LevelActivity.this.runOnUiThread(new Runnable() {                        @Override                        public void run() {                            advertisementService.requestNewInterstitialAd();                            initNewGameDescriptionPopup();                        }                    });                }            });            App.getmInterstitialAd().show();        } else {            advertisementService.requestNewInterstitialAd();            initNewGameDescriptionPopup();        }    }    private void initNewGameDescriptionPopup() {        LevelInfo levelInfo = gameDataHolder.getLevelInfo();        final List<GameExplanation> enums = Lists.newArrayList();        GridData gridData = gameDataHolder.getLevelInfo().getGridData();        if (!savedDataService.containsKey(levelInfo.getCalcType().toString())) {            savedDataService.saveKey(levelInfo.getCalcType().toString(), 1);            enums.add(levelInfo.getCalcType());        }        if (!savedDataService.containsKey(levelInfo.getScoreType().toString())) {            savedDataService.saveKey(levelInfo.getScoreType().toString(), 1);            enums.add(levelInfo.getScoreType());        }        if (gridTileDataService.gridHasTileAttributes(gridData, TileAttribute.glassTileAttributes()) &&                !savedDataService.containsKey(GLASS)) {            savedDataService.saveKey(GLASS, 1);            enums.add(TileAttribute.Glass1);        }        if (gridTileDataService.gridHasTileAttributes(gridData, TileAttribute.blockTileAttributes()) &&                !savedDataService.containsKey(BLOCK)) {            savedDataService.saveKey(BLOCK, 1);            enums.add(TileAttribute.BLOCK1);        }        if (gridTileDataService.gridHasSpecialTiles(gridData, EnumSet.of(SpecialTile.LEPRECHAUN))                && !savedDataService.containsKey(SpecialTile.LEPRECHAUN.toString())) {            savedDataService.saveKey(SpecialTile.LEPRECHAUN.toString(), 1);            enums.add(SpecialTile.LEPRECHAUN);        }        if (GameType.freePowerTileAllowed().contains(levelInfo.getGameType()) &&                !savedDataService.containsKey(GameExplanationExtras.POWER_CLEAR.toString())) {            savedDataService.saveKey(GameExplanationExtras.POWER_CLEAR.toString(), 1);            enums.add(GameExplanationExtras.POWER_CLEAR);        }        if (enums.size() > 0) {            gameDataHolder.setPopupScreenOpen(true);            Runnable initRunnable = new Runnable() {                @Override                public void run() {                    PopupResult popupResult = new PopupResult(LevelActivity.this,                            (ViewGroup) findViewById(R.id.level_activity));                    popupResult.setDuringGameStart(true);                    levelExplanationPopupService.buildPopupWindow(popupResult, enums);                }            };            new Handler().postDelayed(initRunnable, 500);        } else {            Log.d("Game activity", "resumeGame  - initNewGameDescriptionPopup()");            gameDataHolder.setPopupScreenOpen(false);            TouchStateHolder.setTouchState(GridData.TouchState.ENABLED);            startGame();        }    }    @Override    public void onBackPressed() {        if (!gameDataHolder.isPopupScreenOpen()) {            if (!pauseScreenOpen) {                pauseScreen.setVisibility(View.VISIBLE);                pauseScreen.startAnimation(animShowPauseScreen);                pauseScreenOpen = true;                pauseGame();            } else {                pauseScreen.setVisibility(View.GONE);                pauseScreen.startAnimation(animHidePauseScreen);                pauseScreenOpen = false;                Log.d("game activity", "resumeGame - onBackPressed()");                resumeGame();            }        }    }    public IabHelper getmHelper() {        return mHelper;    }}