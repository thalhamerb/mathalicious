package com.thalhamer.numbersgame.Activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.media.AudioManager;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import com.thalhamer.numbersgame.R;import com.thalhamer.numbersgame.dagger.component.DaggerOpeningScreenActivityComponent;import com.thalhamer.numbersgame.dagger.component.OpeningScreenActivityComponent;import com.thalhamer.numbersgame.dagger.module.AppModule;import com.thalhamer.numbersgame.domain.PopupResult;import com.thalhamer.numbersgame.enums.sounds.SoundEnum;import com.thalhamer.numbersgame.services.SavedDataService;import com.thalhamer.numbersgame.services.popup.GameIntroPopupService;import javax.inject.Inject;/** * opening screen activity * <p/> * Created by Brian on 10/14/2015. */public class OpeningScreenActivity extends FragmentActivity {    @Inject    SavedDataService savedDataService;    @Inject    GameIntroPopupService gameIntroPopupService;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        OpeningScreenActivityComponent levelActivityComponent =                DaggerOpeningScreenActivityComponent.builder().appModule(new AppModule()).build();        levelActivityComponent.injectOpeningScreenActivity(this);        setVolumeControlStream(AudioManager.STREAM_MUSIC);        requestWindowFeature(Window.FEATURE_NO_TITLE);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);        setContentView(R.layout.opening_screen_activity);        setButtonListeners();    }    //TODO might want to use this method instead of onResume in LevelActivity to make code simpler    @Override    public void onWindowFocusChanged(boolean hasFocus) {        if (hasFocus && !savedDataService.containsKey("first_time_opened")) {            buildGameIntroPopupWindow();            savedDataService.saveKey("first_time_opened", 1);        }        super.onResume();    }    private void setButtonListeners() {        Button startButton = (Button) findViewById(R.id.startButton);        startButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                SoundEnum.CLICK1.getMediaPlayer().start();                Intent intent = new Intent(OpeningScreenActivity.this, ChooseEpicActivity.class);                startActivity(intent);            }        });        Button introButton = (Button) findViewById(R.id.introButton);        introButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                buildGameIntroPopupWindow();            }        });    }    private void buildGameIntroPopupWindow() {        PopupResult popupResult = new PopupResult(this);        gameIntroPopupService.buildPopupWindow(popupResult);    }    @Override    public void onBackPressed() {        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);        alertDialogBuilder                .setMessage("Are you sure you want to exit Count 'em Up?")                .setCancelable(false)                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                        finishAffinity();                    }                })                .setNegativeButton("No", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                        dialog.cancel();                    }                });        AlertDialog alertDialog = alertDialogBuilder.create();        alertDialog.show();    }}