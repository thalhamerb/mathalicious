package com.thalhamer.numbersgame.enums;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.R;import java.util.EnumSet;/** * tile attributes * * Created by Brian on 10/22/2015. */public enum TileAttribute implements LevelExplanation {    Glass1(5, R.drawable.glass1, App.getContext().getString(R.string.glassDescription), R.drawable.explain_glass), Glass2(6, R.drawable.glass2, App.getContext().getString(R.string.glassDescription), R.drawable.explain_glass),    BLOCK1(10, R.drawable.block1, App.getContext().getString(R.string.blockDescription), R.drawable.explain_block), BLOCK2(11, R.drawable.block2, App.getContext().getString(R.string.blockDescription), R.drawable.explain_block);    private int mappedInteger;    private int resourceId;    private Bitmap bitmap;    private String description;    private int explanationId;    private String gameExplanationTitle;    TileAttribute(int mappedInteger, int resourceId, String description, int explanationId) {        this.mappedInteger = mappedInteger;        this.resourceId = resourceId;        this.bitmap = BitmapFactory.decodeResource(App.getContext().getResources(), resourceId);        this.description = description;        this.explanationId = explanationId;        this.gameExplanationTitle = "Specials";    }    public static TileAttribute getTileAttributeByMappedInteger(int mappedInteger) {        for (TileAttribute tileAttribute : TileAttribute.values()) {            if (tileAttribute.mappedInteger == mappedInteger) {                return tileAttribute;            }        }        return null;    }    public int getResourceId() {        return resourceId;    }    public Bitmap getBitmap() {        return bitmap;    }    public int getMappedInteger() {        return mappedInteger;    }    public static EnumSet<TileAttribute> noImageTileAttributes() {        return EnumSet.of(TileAttribute.BLOCK1, TileAttribute.BLOCK2);    }    public static EnumSet<TileAttribute> blockTileAttributes() {        return EnumSet.of(TileAttribute.BLOCK1, TileAttribute.BLOCK2);    }    public static EnumSet<TileAttribute> glassTileAttributes() {        return EnumSet.of(TileAttribute.Glass1, TileAttribute.Glass2);    }    public static TileAttribute reduceTileAttribute(TileAttribute tileAttribute) {        if (tileAttribute == null) {            return null;        }        if (tileAttribute.getMappedInteger() % 5 == 0) {            return null;        } else {            return getTileAttributeByMappedInteger(tileAttribute.getMappedInteger() - 1);        }    }    @Override    public String getDescription() {        return description;    }    @Override    public int getExplanationId() {        return explanationId;    }    @Override    public String getGameExplanationTitle() {        return gameExplanationTitle;    }}