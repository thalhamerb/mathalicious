/** * */package com.thalhamer.numbersgame.viewhelper;import android.content.Context;import android.util.AttributeSet;import android.util.Log;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;import com.thalhamer.numbersgame.Factory.App;import com.thalhamer.numbersgame.Factory.Factory;import com.thalhamer.numbersgame.domain.GameDataHolder;import com.thalhamer.numbersgame.domain.GridData;import com.thalhamer.numbersgame.enums.GameState;import com.thalhamer.numbersgame.services.GameInitiateService;import com.thalhamer.numbersgame.services.GridMappingService;import com.thalhamer.numbersgame.services.MotionEventService;import com.thalhamer.numbersgame.services.PowerService;import com.thalhamer.numbersgame.services.SavedDataService;import java.io.IOException;public class MainGamePanel extends SurfaceView implements SurfaceHolder.Callback {    private Factory factory;    private volatile MainThread thread;    private MotionEventService motionEventService;    private GridMappingService gridMappingService;    private GameInitiateService gameInitiateService;    private GameDataHolder gameDataHolder;    private SavedDataService savedDataService;    private PowerService powerService;    public MainGamePanel(Context context, AttributeSet attrs) throws IOException {        super(context, attrs);        this.factory = App.getFactory();        init(factory);        // adding the callback (this) to the surface holder to intercept events        getHolder().addCallback(this);        // make the GamePanel focusable so it can handle events        setFocusable(true);    }    private void init(Factory factory) throws IOException {        this.gameInitiateService = factory.getGameInitiateService();        this.motionEventService = factory.getMotionEventService();        this.gridMappingService = factory.getGridMappingService();        this.gameDataHolder = factory.getGameDataHolder();        this.gameDataHolder.setGamePanel(this);        this.savedDataService = factory.getSavedDataService();        this.powerService = factory.getPowerService();        String sectionName = savedDataService.constructSectionName(gameDataHolder.getLevelData().getEpic(), gameDataHolder.getLevelData().getSection());        this.gameInitiateService.initiateLevelData(sectionName, gameDataHolder.getLevelData().getLevel());    }    @Override    public void surfaceCreated(SurfaceHolder holder) {        Log.d("MainGamePanel", "Surface is being created");        if (!gameDataHolder.isGameRunning()) {            gameInitiateService.startBoard();            gridMappingService.setInitialBoard();            powerService.setPowers();            GameStateHolder.setGameState(GameState.RUNNING);        }        gameDataHolder.setGameRunning(true);        thread = new MainThread(this, factory);        // at this point the surface is created and we can safely start the game loop        thread.setRunning(true);        thread.start();    }    @Override    public boolean onTouchEvent(MotionEvent event) {        if (TouchStateHolder.getTouchState() != GridData.TouchState.DISABLED) {            if (GameStateHolder.getGameState() == GameState.RUNNING) {                return motionEventService.handleEvent(event);            } else {                return false;            }        } else {            return false;        }    }    @Override    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {    }    @Override    public void surfaceDestroyed(SurfaceHolder holder) {        Log.d("MainGamePanel", "Surface is being destroyed");        boolean retry = true;        thread.setRunning(false);        while (retry) {            try {                thread.join();                thread = null;                retry = false;            } catch (InterruptedException e) {                Log.d("destroying surface fail", e.getMessage());            }        }    }}